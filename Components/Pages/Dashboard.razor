@page "/dashboard"
@using TrackApp_alish.Models
@using TrackApp_alish.Services
@inject IDebtService DebtService
@inject ITransactionService TransactionService
@inject IJSRuntime JSRuntime

<style>
    :root {
        --primary-bg: #1a1a1a;
        --card-bg-green: #A0FF8F;
        --card-bg-yellow: #FFDB67;
        --card-bg-blue: #6776FF;
        --card-bg-red: #FF4B4B;
        --card-bg-cyan: #67E6FF;
        --card-bg-purple: #BA67FF;
        --border-color: #8C8989;
        --text-primary: #000;
        --text-secondary: #fff;
        --filter-shadow: 0 4px 6px rgba(0,0,0,0.1);
        --transition-speed: 0.3s;
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Inter', sans-serif;
        line-height: 1.5;
        background: #fff;
    }

    .dashboard-container {
        display: flex;
        min-height: 100vh;
    }

    .main-content {
        flex: 1;
        padding: 2rem;
        overflow-y: auto;
        position: relative;
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        position: relative;
    }

    .page-title {
        font-size: 2.5rem;
        font-weight: 500;
    }

    .search-and-filter {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .search-container {
        position: relative;
        width: 300px;
    }

    .search-input {
        width: 100%;
        padding: 0.75rem 1rem;
        padding-right: 3rem;
        border: none;
        border-radius: 35px;
        background: #d9d9d9;
        font-size: 1rem;
    }

    .search-button {
        position: absolute;
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        cursor: pointer;
        padding: 0.5rem;
    }

    .filter-button {
        background: #d9d9d9;
        border: none;
        border-radius: 50%;
        width: 44px;
        height: 44px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: background-color var(--transition-speed);
    }

        .filter-button:hover {
            background: #c4c4c4;
        }

        .filter-button svg {
            width: 24px;
            height: 24px;
        }

    .filters-panel {
        position: absolute;
        top: calc(100% + 1rem);
        right: 0;
        width: 320px;
        background: white;
        border-radius: 10px;
        box-shadow: var(--filter-shadow);
        padding: 1.5rem;
        z-index: 1000;
        opacity: 0;
        visibility: hidden;
        transform: translateY(-10px);
        transition: all var(--transition-speed);
    }

        .filters-panel.show {
            opacity: 1;
            visibility: visible;
            transform: translateY(0);
        }

    .filter-group {
        margin-bottom: 1.5rem;
    }

        .filter-group:last-child {
            margin-bottom: 0;
        }

    .filter-label {
        display: block;
        font-weight: 500;
        margin-bottom: 0.5rem;
        color: var(--text-primary);
    }

    .filter-select,
    .filter-input {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 1rem;
        background: #fff;
    }

        .filter-select[multiple] {
            height: 100px;
        }

    .date-range {
        display: flex;
        gap: 0.5rem;
    }

        .date-range .filter-input {
            flex: 1;
        }

    .sort-buttons {
        display: flex;
        gap: 0.5rem;
        margin-top: 1rem;
    }

    .sort-button {
        flex: 1;
        padding: 0.5rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        background: #fff;
        cursor: pointer;
        font-weight: 500;
        transition: all var(--transition-speed);
    }

        .sort-button[aria-pressed="true"] {
            background: #d9d9d9;
            border-color: #999;
        }

    .dashboard-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 2rem;
        margin-bottom: 2rem;
    }

    .card {
        padding: 1.5rem;
        border-radius: 35px;
        color: var(--text-primary);
    }

    .card-title {
        font-size: 1.25rem;
        font-weight: 500;
        margin-bottom: 1rem;
    }

    .card-amount {
        font-size: 2rem;
        font-weight: 600;
    }

    .balance-card {
        background: var(--card-bg-green);
    }

    .inflow-card {
        background: var(--card-bg-yellow);
    }

    .outflow-card {
        background: var(--card-bg-blue);
    }

    .debt-card {
        background: var(--card-bg-red);
    }

    .remaining-card {
        background: var(--card-bg-cyan);
    }

    .cleared-card {
        background: var(--card-bg-purple);
    }

    .transactions-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        background: #FFFAE4;
        border-radius: 10px;
        overflow: hidden;
    }

        .transactions-table th,
        .transactions-table td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid var(--border-color);
        }

        .transactions-table th {
            font-weight: 500;
            background: rgba(0, 0, 0, 0.05);
            cursor: pointer;
        }

            .transactions-table th:hover {
                background: rgba(0, 0, 0, 0.1);
            }

    .tag {
        display: inline-block;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        background: #e0e0e0;
        font-size: 0.875rem;
        margin-right: 0.5rem;
    }

  

    .main-content {
        padding: 1rem;
    }

    .header {
        flex-direction: column;
        gap: 1rem;
    }

    .search-and-filter {
        width: 100%;
    }

    .search-container {
        flex: 1;
    }

    .filters-panel {
        width: 100%;
        max-width: 320px;
    }


    [role="button"],
    button {
        cursor: pointer;
    }

    :focus-visible {
        outline: 3px solid #4A90E2;
        outline-offset: 2px;
    }

    /* #cashFlowChart { */
    /*     display: block; */
    /*     width: 100px; */
    /*     height: 50px; */
    /* } */

</style>

<script>
    function renderChart(inflow, outflow) {
        const ctx = document.getElementById('cashFlowChart');
        if (!ctx) {
            console.error('Canvas element not found!');
            return;
        }

        new Chart(ctx.getContext('2d'), {
            type: 'doughnut',
            data: {
                labels: ['Cash Inflow', 'Cash Outflow'],
                datasets: [{
                    data: [inflow, outflow],
                    backgroundColor: ['#67FF67', '#FF6767'],
                    borderColor: ['#4CAF50', '#F44336'],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top'
                    }
                }
            }
        });
    }
</script>

<main class="dashboard-container">
    <div class="main-content">
        <header class="header">
            <h1 class="page-title">Dashboard</h1>
            <div class="search-and-filter">
                <div class="search-container">
                    <input type="search" id="search" class="search-input" placeholder="Search transactions" @bind="searchQuery" />
                    <button type="button" class="search-button" aria-label="Submit search">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <circle cx="11" cy="11" r="8" />
                            <line x1="21" y1="21" x2="16.65" y2="16.65" />
                        </svg>
                    </button>
                </div>
                <button type="button" class="filter-button" aria-expanded="false" aria-controls="filters-panel" aria-label="Show filters" @onclick="ToggleFilters">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <line x1="4" y1="21" x2="4" y2="14" />
                        <line x1="4" y1="10" x2="4" y2="3" />
                        <line x1="12" y1="21" x2="12" y2="12" />
                        <line x1="12" y1="8" x2="12" y2="3" />
                        <line x1="20" y1="21" x2="20" y2="16" />
                        <line x1="20" y1="12" x2="20" y2="3" />
                    </svg>
                </button>
            </div>
        </header>

        <!-- Chart Section -->
        <section aria-labelledby="cash-flow-chart-heading" style="margin-bottom: 2rem;">
            <h2 id="cash-flow-chart-heading">Cash Flow Overview</h2>
            <div style="width: 800px; height: 400px; margin: 0 auto;">
                <canvas id="cashFlowChart"></canvas>
            </div>
        </section>

        <!-- Dashboard Grid -->
        <section class="dashboard-grid">
            <div class="card balance-card">
                <h2 class="card-title">Available Balance</h2>
                <p class="card-amount">₹@totalBalance</p>
            </div>
            <div class="card inflow-card">
                <h2 class="card-title">Total Cash Inflow</h2>
                <p class="card-amount">₹@totalInflow</p>
            </div>
            <div class="card outflow-card">
                <h2 class="card-title">Total Cash Outflow</h2>
                <p class="card-amount">₹@totalOutflow</p>
            </div>
            <div class="card debt-card">
                <h2 class="card-title">Total Debt</h2>
                <p class="card-amount">₹@totalDebt</p>
            </div>
            <div class="card remaining-card">
                <h2 class="card-title">Remaining Debt</h2>
                <p class="card-amount">₹@remainingDebt</p>
            </div>
            <div class="card cleared-card">
                <h2 class="card-title">Cleared Debt</h2>
                <p class="card-amount">₹@clearedDebt</p>
            </div>
        </section>

        <!-- Pending Debts -->
        <section aria-labelledby="pending-debts-heading" style="margin-top: 2rem;">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <h2 id="pending-debts-heading">Top 5 Pending Debts</h2>
                <div class="filter-group" style="display: flex; gap: 1rem; align-items: center;">
                    <label for="pendingFilter" class="filter-label" style="margin: 0;">Filter:</label>
                    <input type="text" id="pendingFilter" class="filter-input" placeholder="Filter by title" @bind="searchQuery" />
                    <button class="sort-button" @onclick="ApplyFilters" style="height: fit-content;">Apply</button>
                </div>
            </div>
            <table class="transactions-table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Amount</th>
                        <th>Due Date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var debt in filteredDebts)
                    {
                        <tr>
                            <td>@debt.Title</td>
                            <td>₹@debt.Amount</td>
                            <td>@debt.DueDate.ToString("dd-MM-yyyy")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </section>



        <!-- Top 5 Highest Transactions -->
        <section aria-labelledby="highest-transactions-heading" style="margin-top: 2rem;">
            <h2 id="highest-transactions-heading">Top 5 Highest Transactions</h2>
            <table class="transactions-table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Amount</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in highestTransactions)
                    {
                        <tr>
                            <td>@transaction.Description</td>
                            <td>@transaction.Type</td>
                            <td>₹@transaction.Amount</td>
                        </tr>
                    }
                </tbody>
            </table>
        </section>

        <!-- Top 5 Lowest Transactions -->
        <section aria-labelledby="lowest-transactions-heading" style="margin-top: 2rem;">
            <h2 id="lowest-transactions-heading">Top 5 Lowest Transactions</h2>
            <table class="transactions-table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Amount</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in lowestTransactions)
                    {
                        <tr>
                            <td>@transaction.Description</td>
                            <td>@transaction.Type</td>
                            <td>₹@transaction.Amount</td>
                        </tr>
                    }
                </tbody>
            </table>
        </section>
    </div>
</main>

@code {
    private decimal totalBalance;
    private decimal totalInflow;
    private decimal totalOutflow;
    private decimal totalDebt;
    private decimal remainingDebt;
    private decimal clearedDebt;
    private string searchQuery;
    private List<Debt> filteredDebts = new List<Debt>();
    private DateTime? filterStartDate;
    private DateTime? filterEndDate;
    private List<Debt> pendingDebts = new List<Debt>();
    private List<TransactionModel> highestTransactions = new List<TransactionModel>();
    private List<TransactionModel> lowestTransactions = new List<TransactionModel>();

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
        RenderChart();

    }

    private async Task LoadDashboardData()
    {
        var debts = await DebtService.GetAllDebtsAsync();
        pendingDebts = debts.Where(d => d.Status == "Pending").Take(5).ToList();
        filteredDebts = pendingDebts;

        var transactions = await TransactionService.GetAllTransactionsAsync();

        totalInflow = transactions.Where(t => t.Type == "Credit").Sum(t => t.Amount);
        totalOutflow = transactions.Where(t => t.Type == "Debit").Sum(t => t.Amount);
        totalDebt = debts.Sum(d => d.Amount);
        clearedDebt = debts.Where(d => d.Status == "Cleared").Sum(d => d.Amount);
        remainingDebt = totalDebt - clearedDebt;

        highestTransactions = transactions.OrderByDescending(t => t.Amount).Take(5).ToList();
        lowestTransactions = transactions.OrderBy(t => t.Amount).Take(5).ToList();
        totalBalance = totalInflow - totalOutflow - remainingDebt;
    }

    private void ApplyFilters()
    {
        filteredDebts = pendingDebts;

        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredDebts = filteredDebts.Where(d => d.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        if (filterStartDate.HasValue)
        {
            filteredDebts = filteredDebts.Where(d => d.DueDate >= filterStartDate.Value).ToList();
        }

        if (filterEndDate.HasValue)
        {
            filteredDebts = filteredDebts.Where(d => d.DueDate <= filterEndDate.Value).ToList();
        }
    }


    private void RenderChart()
    {
        InvokeAsync(() =>
        {
            var inflow = Convert.ToDouble(totalInflow);
            var outflow = Convert.ToDouble(totalOutflow);

            // Ensure JSRuntime is invoking the JavaScript correctly
            JSRuntime.InvokeVoidAsync("renderChart", inflow, outflow);
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            RenderChart();
        }
    }

    private void ToggleFilters()
    {
        // Add logic for filter toggling if necessary
    }
}
